{"version":3,"sources":["components/ClockFace/ClockFace.styled.ts","common/hocs/withTimer.tsx","components/ClockFace/index.ts","components/ClockFace/ClockFace.tsx","components/Timer/Timer.styled.ts","common/styledComponents/Button.styled.ts","common/styledComponents/Container.styled.ts","components/TimerSwitcher/TimerSwitcher.styled.ts","components/TimerSwitcher/index.ts","components/TimerSwitcher/TimerSwitcher.tsx","assets/icon-settings.svg","components/Timer/index.ts","components/Timer/Timer.tsx","common/containers/Portal.tsx","components/ModalWindow/ModalWindow.styled.ts","assets/icon-close.svg","components/ModalWindow/TimeUnit/TimeUnit.styled.ts","components/ModalWindow/TimeUnit/index.ts","components/ModalWindow/TimeUnit/TimeUnit.tsx","components/ModalWindow/ModalWindow.tsx","components/ModalWindow/index.ts","common/services/StorageService.ts","app/themes.ts","common/hooks/useThemes.ts","common/hooks/useTimerConfig.ts","index.styled.ts","app/index.ts","app/App.tsx","index.tsx"],"names":["Outer","styled","div","layout","Inner","CircularWrapper","Content","RemainTime","h2","fontSize","Action","props","theme","color","withTimer","View","toggleTimer","timerType","initValue","useState","time","setTime","isActive","toggleActive","isEndsTimer","setEndsTimer","useEffect","restartTimer","id","setInterval","clearInterval","constructCorrectValue","value","pauseHandler","actionContent","timePart","timestamp","minutes","Math","floor","seconds","formatTime","ClockFace","withTheme","width","height","strokeWidth","styles","buildStyles","trailColor","pathColor","primaryColor","onClick","Title","h1","SwitchWrapper","SettingsButton","button","Button","Container","Switcher","SwitcherItem","active","TimerSwitcher","labels","switchActiveTimerType","activeTimerType","e","target","dataset","type","map","label","className","data-type","Timer","openModal","config","src","settingsIcon","alt","Portal","children","container","document","createElement","body","prepend","style","overflow","remove","ReactDOM","createPortal","TopIndent","css","FlexSettings","Overlay","Modal","Header","header","DivLine","hr","Subtitle","h3","MainContent","main","UserSelection","section","flexbox","TimeSelection","FontSelection","PrimaryColorSelection","OptionWrapper","RoundOption","FontOption","fontFamily","PrimaryColorOption","ApplyingChanges","CloseButton","Unit","Input","input","InputLabel","span","TimeUnit","changeTimeConfig","display","justifyContent","alignItems","onInput","newValue","currentTarget","prevConfig","min","max","customModalComponents","ModalWindow","closeModal","themeList","switchThemeValue","timerConfig","changeTimerConfig","generateInitialState","propName","findIndex","currentFontNumber","setCurrentFontNumber","currentPrimaryColorNumber","setCurrentPrimaryColorNumber","newLocalTimerConfig","setNewLocalTimerConfig","cross","flexDirection","Object","entries","data","font","idx","backgroundColor","is","StorageService","key","storage","window","localStorage","this","getItem","setItem","themes","useThemes","themeStorage","useMemo","initialTheme","setTheme","localTheme","getData","JSON","parse","setData","stringify","newPropNumber","prevTheme","useTimerConfig","timerStorage","setTimerConfig","localConfig","newConfig","CommonStyles","createGlobalStyle","App","isModalActive","toggleModal","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c19cc5bc.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { layout, fontSize, FontSizeProps } from 'styled-system';\n\nexport const Outer = styled.div<any>`\n  padding: 1.4rem;\n  margin: 5rem auto 0;\n  border-radius: 50%;\n  background: linear-gradient(315deg, #2E325A 0%, #0E112A 100%);\n  box-shadow: -50px -50px 100px #272C5A, 50px 50px 100px #121530;\n  ${layout}\n`;\n\nexport const Inner = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: #161932;\n  color: #d7e0ff;\n`;\n\nexport const CircularWrapper = styled.div`\n  width: 90%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nexport const Content = styled(CircularWrapper)`\n  text-align: center;\n  z-index: 2;\n`\n\nexport const RemainTime = styled.h2<FontSizeProps>`\n  font-size: 5.5rem;\n  font-weight: 700;\n  ${fontSize}\n`\n\nexport const Action = styled.h2`\n  cursor: pointer;\n  margin-top: 2rem;\n  font-size: 1rem;\n  letter-spacing: 15px;\n  \n  &:hover {\n    color: ${props => props.theme.color};\n  }\n`","import React, { Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { timerType } from 'timer';\n\ninterface baseProps {\n    toggleTimer: Dispatch<SetStateAction<timerType>>,\n    timerType: timerType,\n    initValue: number,\n}\n\ninterface injectedProps {\n    time: string,\n    timePart: number,\n    pauseHandler: () => void,\n    actionContent: string,\n}\n\nconst withTimer = () => (View: React.ComponentType<injectedProps>) => {\n    return ({ toggleTimer, timerType, initValue }: baseProps) => {\n        const [time, setTime] = useState<number>(0);\n        const [isActive, toggleActive] = useState<boolean>(false);\n        const [isEndsTimer, setEndsTimer] = useState<boolean>(false);\n\n        useEffect(() => {\n            setTime(initValue);\n            return () => {\n                toggleActive(false);\n                setEndsTimer(false);\n            };\n        }, [initValue, timerType]);\n\n        // on time ends\n        useEffect(() => {\n            if (time <= 0 && isActive) {\n                restartTimer();\n            }\n        }, [time, toggleTimer]);\n\n        // on pause/resume\n        useEffect(() => {\n            if (isActive) {\n                const id = setInterval(() => {\n                    setTime(time => {\n                        if (time <= 0) {\n                            clearInterval(id);\n                            return 0;\n                        }\n\n                        return time - 1;\n                    });\n                }, 1000);\n\n                return () => clearInterval(id);\n            }\n        }, [isActive]);\n\n        const restartTimer = (): void => {\n            setTime(initValue);\n            setEndsTimer(true);\n            toggleActive(false);\n        };\n\n        const formatTime = (timestamp: number): string => {\n            const minutes = Math.floor(timestamp / 60),\n                  seconds = timestamp % 60;\n\n            return `${constructCorrectValue(minutes)}:${constructCorrectValue(seconds)}`;\n        };\n\n        const constructCorrectValue = (value: number): number | string => {\n            return value < 10 ? `0${value}` : value;\n        };\n\n        const pauseHandler = () => {\n            if (isEndsTimer) {\n                setEndsTimer(false);\n            }\n\n            toggleActive(isActive => !isActive);\n        };\n\n        return <View pauseHandler={pauseHandler}\n                     actionContent={\n                         isActive ? 'STOP' : isEndsTimer ? 'RESTART' : 'START'\n                     }\n                     timePart={time * 100 / initValue}\n                     time={formatTime(time)}/>;\n    };\n};\n\nexport default withTimer;","import ClockFace from './ClockFace';\n\nexport default ClockFace;","import React from 'react';\nimport { Action, CircularWrapper, Content, Inner, Outer, RemainTime } from './ClockFace.styled';\nimport { buildStyles, CircularProgressbar } from 'react-circular-progressbar';\n\nimport { withTimer } from '../../common/hocs';\n\nimport 'react-circular-progressbar/dist/styles.css';\nimport { withTheme } from 'styled-components';\nimport { theme } from 'themes';\n\ninterface TimerProps {\n    time: string,\n    timePart: number,\n    pauseHandler: () => void,\n    actionContent: string,\n    theme: theme;\n}\n\nconst ClockFace: React.FC<TimerProps> = ({ time, timePart, pauseHandler, actionContent, theme}) => {\n    return (\n        <Outer width={[250, 270, 370, 450]} height={[250, 270, 370, 450]}>\n            <Inner>\n                <CircularWrapper>\n                    <CircularProgressbar strokeWidth={4} styles={buildStyles({\n                        trailColor: 'none',\n                        pathColor: theme.primaryColor,\n                    })} value={timePart}/>\n                </CircularWrapper>\n                <Content>\n                    <RemainTime fontSize={['5.2rem', '5.4rem', '5.4rem', '5.4rem']}>{time}</RemainTime>\n                    <Action onClick={pauseHandler}>{actionContent}</Action>\n                </Content>\n            </Inner>\n        </Outer>\n    );\n};\n\nexport default withTimer()(withTheme(ClockFace));","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  padding-top: 2rem;\n  text-align: center;\n  color: #fff;\n`;\n\nexport const SwitchWrapper = styled.div<any>`\n  text-align: center;\n  margin-top: 5rem\n`;\n\nexport const SettingsButton = styled.button`\n  background: none;\n  border: none;\n  display: block;\n  margin: 5rem auto 0;\n  cursor: pointer;\n`","import styled from 'styled-components';\nimport { layout, LayoutProps } from 'styled-system';\n\nconst Button = styled.button<LayoutProps>`\n  min-height: 3rem;\n  border-radius: 27px;\n  border: none;\n  cursor: pointer;\n  background-color: ${props => props.theme.primaryColor};\n\n  ${layout}\n`;\n\nexport default Button;","import styled from 'styled-components';\nimport { layout } from 'styled-system';\n\nconst Container = styled.div<any>`\n  margin: 0 auto;\n  padding: 0 1.5rem;\n  ${layout}\n`;\n\nexport default Container;","import styled from 'styled-components';\nimport { Button } from '../../common/styledComponents';\n\nexport const Switcher = styled.div`\n  background-color: #161932;\n  border-radius: 5rem;\n  display: inline-block;\n  padding: .5rem;\n`;\n\nexport const SwitcherItem = styled(Button)<{active: boolean}>`\n  font-weight: 700;\n  background-color: ${props => !props.active ? 'transparent' : ''};\n  color: ${props => !props.active ? '#8c8c8c' : '#1e213f'};\n  &:hover {\n    color: ${props => !props.active ? '#d7e0ff' : ''};\n  }\n`;","import TimerSwitcher from './TimerSwitcher';\n\nexport default TimerSwitcher;","import React, { Dispatch, SetStateAction } from 'react';\n\nimport { Switcher, SwitcherItem } from './TimerSwitcher.styled';\nimport { timerType } from 'timer';\n\ninterface TimerSwitcherProps {\n    switchActiveTimerType: Dispatch<SetStateAction<timerType>>,\n    activeTimerType: timerType,\n}\n\nconst TimerSwitcher: React.FC<TimerSwitcherProps> = ({ switchActiveTimerType, activeTimerType }) => {\n\n    const onClickHandler = (e: React.MouseEvent<HTMLDivElement>): void => {\n        const target = e.target as typeof e.target & {\n            dataset: { type: timerType };\n        };\n\n        if (target.dataset.type) {\n            switchActiveTimerType(target.dataset.type);\n        }\n    };\n\n    const renderItems = (labels: timerType[]): React.ReactNode[] => {\n        return labels.map(label => {\n            return <SwitcherItem key={label}\n                                 className='focus'\n                                 data-type={label}\n                                 active={activeTimerType === label}\n                                 width={[90, 120, 150, 200]}>{label}</SwitcherItem>;\n        });\n    };\n\n    return (\n        <Switcher onClick={onClickHandler}>\n            {renderItems(['pomodoro', 'short break', 'long break'])}\n        </Switcher>\n    );\n};\n\nexport default TimerSwitcher;","export default __webpack_public_path__ + \"static/media/icon-settings.e0a317db.svg\";","import Timer from './Timer';\n\nexport default Timer;","import React, { useState } from 'react';\n\nimport ClockFace from '../ClockFace';\nimport { SwitchWrapper, Title, SettingsButton } from './Timer.styled';\nimport TimerSwitcher from '../TimerSwitcher';\n\nimport { Container } from '../../common/styledComponents';\n\nimport settingsIcon from '../../assets/icon-settings.svg';\nimport { timerConfig, timerType } from 'timer';\n\ninterface TimerProps {\n    openModal: () => void,\n    config: timerConfig,\n}\n\nconst Timer: React.FC<TimerProps> = ({ openModal, config }) => {\n    const [activeTimerType, switchActiveTimerType] = useState<timerType>('pomodoro');\n\n    return (\n        <Container width={1}>\n            <Title>pomodoro</Title>\n            <SwitchWrapper>\n                <TimerSwitcher activeTimerType={activeTimerType} switchActiveTimerType={switchActiveTimerType}/>\n            </SwitchWrapper>\n            <ClockFace initValue={config[activeTimerType]} timerType={activeTimerType}\n                       toggleTimer={switchActiveTimerType}/>\n            <SettingsButton onClick={openModal} className='focus'>\n                <img src={settingsIcon} alt=\"settings\"/>\n            </SettingsButton>\n        </Container>\n    );\n};\n\nexport default Timer;","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface PortalProps {\n    id: string,\n}\n\nconst Portal: React.FC<PortalProps> = ({ id, children }) => {\n    const container = document.createElement('div');\n    container.id = id;\n\n    useEffect(() => {\n        document.body.prepend(container);\n        document.body.style.overflow = 'hidden';\n        return () => {\n            container.remove();\n            document.body.style.overflow = '';\n        };\n    }, [container]);\n\n\n    return (\n        ReactDOM.createPortal(\n            children,\n            container\n        )\n    );\n};\n\nexport default Portal;","import styled, { css } from 'styled-components';\nimport {\n    color,\n    BackgroundColorProps,\n    fontFamily,\n    FontFamilyProps,\n    flexbox, FlexboxProps, width, WidthProps\n} from 'styled-system';\nimport { Button } from '../../common/styledComponents';\n\nconst TopIndent = css`\n  margin-top: 2rem;\n`;\n\nconst FlexSettings = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  min-height: 100vh;\n  background-color: rgba(0, 0, 0, .5);\n  z-index: 9;\n`;\n\nexport const Modal = styled.div<WidthProps>`\n  ${width};\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #fff;\n  border-radius: 25px;\n  color: #161932;\n  padding: 1.5rem 0 4rem;\n`;\n\nexport const Header = styled.header`\n  ${FlexSettings};\n`;\n\nexport const DivLine = styled.hr`\n  ${TopIndent};\n  border-top: 1px solid #e3e1e1;\n`;\n\nexport const Subtitle = styled.h3`\n  letter-spacing: 5px;\n  text-transform: uppercase;\n`;\n\nexport const MainContent = styled.main`\n  ${TopIndent};\n`;\n\nconst UserSelection = styled.section<FlexboxProps>`\n  ${FlexSettings};\n  ${TopIndent};\n  ${flexbox};\n  gap: 10px;\n`;\n\nexport const TimeSelection = styled(UserSelection)<FlexboxProps>`\n  ${flexbox};\n`;\n\nexport const FontSelection = styled(UserSelection)``;\n\nexport const PrimaryColorSelection = styled(UserSelection)``;\n\nexport const OptionWrapper = styled.div`\n  ${FlexSettings};\n  gap: 1rem;\n`;\n\nconst RoundOption = styled.button<{ active: boolean }>`\n  width: 2.5rem;\n  height: 2.5rem;\n  border-radius: 50%;\n  border: none;\n  font-weight: 700;\n  cursor: pointer;\n`;\n\nexport const FontOption = styled(RoundOption)<FontFamilyProps>`\n  ${FlexSettings};\n  background-color: ${props => props.active ? '#161932' : '#e3e1e1'};\n  color: ${props => props.active ? '#fff' : ''};\n  justify-content: center;\n  ${fontFamily}\n`;\n\nexport const PrimaryColorOption = styled(RoundOption)<BackgroundColorProps>`\n  ${color};\n  position: relative;\n\n  &:before {\n    content: '✔';\n    display: ${props => props.active ? '' : 'none'};\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n`;\n\nexport const ApplyingChanges = styled(Button)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 50%);\n  color: #fff;\n  font-weight: 700;\n`;\n\nexport const CloseButton = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n`;","export default __webpack_public_path__ + \"static/media/icon-close.79cfecaf.svg\";","import styled from 'styled-components';\nimport { layout, flexbox, LayoutProps, FlexboxProps } from 'styled-system';\n\ninterface UnitProps extends LayoutProps, FlexboxProps {\n}\n\nexport const Unit = styled.label<UnitProps>`\n  ${layout};\n  ${flexbox};\n`;\n\nexport const Input = styled.input<any>`\n  ${layout};\n  \n  background: #EFF1FA;\n  border-radius: 10px;\n  border: none;\n  min-height: 2.3rem;\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n`;\n\nexport const InputLabel = styled.span<LayoutProps>`\n  ${layout};\n  \n  display: block;\n  font-weight: 700;\n  font-size: 0.8rem;\n  color: #858585;\n`;","import TimeUnit from './TimeUnit';\n\nexport default TimeUnit;","import React, { Dispatch, SetStateAction } from 'react';\n\nimport { Input, InputLabel, Unit } from './TimeUnit.styled';\nimport { timerConfig } from 'timer';\n\ninterface TimeUnitProps {\n    label: string,\n    value: number,\n    changeTimeConfig: Dispatch<SetStateAction<timerConfig>>\n}\n\nconst TimeUnit: React.FC<TimeUnitProps> = ({ label, value, changeTimeConfig }) => {\n    const inputHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        const newValue = +e.currentTarget.value * 60;\n\n        changeTimeConfig(prevConfig => ({\n            ...prevConfig,\n            [label]: newValue,\n        }));\n    };\n\n    return (\n        <Unit display={['flex', 'block', 'block', 'block']}\n                justifyContent={['space-between', '', '', '']}\n                alignItems={['center', '', '', '']}\n                width={[1, 0.4, 0.4, 0.4]}>\n            <InputLabel width={['30%', '100%', '100%', '100%']}>{label}</InputLabel>\n            <Input value={value} onInput={inputHandler} min='1' max='100' type='number'\n                   width={['60%', '100%', '100%', '100%']}/>\n        </Unit>\n    );\n};\n\nexport default TimeUnit;","import React, { useState } from 'react';\n\nimport * as customModalComponents from './ModalWindow.styled';\n\nimport cross from '../../assets/icon-close.svg';\nimport { Container } from '../../common/styledComponents';\n\nimport TimeUnit from './TimeUnit';\nimport { theme, themeList, themeProps } from 'themes';\nimport { withTheme } from 'styled-components';\nimport { timerConfig } from 'timer';\n\nconst {\n          Overlay,\n          Modal,\n          Header,\n          Subtitle,\n          MainContent,\n          DivLine,\n          TimeSelection,\n          FontSelection,\n          PrimaryColorSelection,\n          FontOption,\n          OptionWrapper,\n          PrimaryColorOption,\n          ApplyingChanges,\n          CloseButton\n      } = customModalComponents;\n\ninterface ModalWindowProps {\n    switchThemeValue: (propName: themeProps, newValueNumber: number) => void,\n    themeList: themeList\n    closeModal: () => void,\n    theme: theme,\n    changeTimerConfig: (newConfig: timerConfig) => void,\n    timerConfig: timerConfig,\n}\n\nconst ModalWindow: React.FC<ModalWindowProps> = ({\n                                                     closeModal,\n                                                     themeList,\n                                                     switchThemeValue,\n                                                     theme,\n                                                     timerConfig,\n                                                     changeTimerConfig\n                                                 }) => {\n    const generateInitialState = (propName: themeProps): number => {\n        return themeList[propName].findIndex(value => value === theme[propName]);\n    };\n\n    const [currentFontNumber, setCurrentFontNumber] = useState(generateInitialState('font'));\n    const [currentPrimaryColorNumber, setCurrentPrimaryColorNumber] = useState(generateInitialState('primaryColor'));\n\n    const [newLocalTimerConfig, setNewLocalTimerConfig] = useState<timerConfig>(timerConfig);\n\n    const applyingHandler = (): void => {\n        if (themeList.font[currentFontNumber] !== theme.font) {\n            switchThemeValue('font', currentFontNumber);\n        }\n\n        if (themeList.primaryColor[currentPrimaryColorNumber] !== theme.primaryColor) {\n            switchThemeValue('primaryColor', currentPrimaryColorNumber);\n        }\n\n        if (!Object.is(newLocalTimerConfig, timerConfig)) {\n            changeTimerConfig(newLocalTimerConfig);\n        }\n\n        closeModal();\n    };\n\n    const fontOptionRender = () => {\n        return themeList.font.map((fontFamily, idx) => {\n            return <FontOption active={currentFontNumber === idx}\n                               fontFamily={fontFamily}\n                               className='focus'\n                               onClick={() => setCurrentFontNumber(idx)}\n                               key={fontFamily}>Aa</FontOption>;\n        });\n    };\n\n    const colorOptionRender = () => {\n        return themeList.primaryColor.map((color, idx) => {\n            return <PrimaryColorOption active={currentPrimaryColorNumber === idx}\n                                       onClick={() => setCurrentPrimaryColorNumber(idx)}\n                                       className='focus'\n                                       backgroundColor={color}\n                                       key={color}/>;\n        });\n    };\n\n    const timerInputsRender = (): React.ReactNode[] => {\n        return Object.entries(newLocalTimerConfig).map(data => {\n            const [label, value] = data;\n\n            return <TimeUnit key={label} changeTimeConfig={setNewLocalTimerConfig} value={value / 60} label={label}/>;\n        });\n    };\n\n    return (\n        <Overlay>\n            <Modal width={[.9, .8, .6, .4]}>\n                <Container>\n                    <Header>\n                        <h2>Settings</h2>\n                        <CloseButton className='focus' onClick={closeModal}><img src={cross} alt=\"close\"/></CloseButton>\n                    </Header>\n                </Container>\n                <DivLine/>\n                <Container>\n                    <MainContent>\n                        <Subtitle>Time (Minutes)</Subtitle>\n                        <TimeSelection\n                            flexDirection={['column', 'row', 'row', 'row']}\n                            alignItems={['flex-start', '', '', '']}>\n                            {timerInputsRender()}\n                        </TimeSelection>\n                        <DivLine/>\n                        <FontSelection flexDirection={['column', 'row', 'row', 'row']}>\n                            <Subtitle>Font</Subtitle>\n                            <OptionWrapper>\n                                {fontOptionRender()}\n                            </OptionWrapper>\n                        </FontSelection>\n                        <DivLine/>\n                        <PrimaryColorSelection\n                            flexDirection={['column', 'row', 'row', 'row']}>\n                            <Subtitle>Color</Subtitle>\n                            <OptionWrapper>\n                                {colorOptionRender()}\n                            </OptionWrapper>\n                        </PrimaryColorSelection>\n                    </MainContent>\n                </Container>\n                <ApplyingChanges onClick={applyingHandler} className='focus' width={140}>Apply</ApplyingChanges>\n            </Modal>\n        </Overlay>\n    );\n};\n\nexport default withTheme(ModalWindow);","import ModalWindow from './ModalWindow';\n\nexport default ModalWindow;","export default class StorageService {\n    private storage = window.localStorage;\n\n    constructor(private key: string) {\n    }\n\n    getData(): string | null {\n        return this.storage.getItem(this.key);\n    }\n\n    setData(value: string): void {\n        this.storage.setItem(this.key, value);\n    }\n}","import { themeList } from 'themes';\n\nconst themes: themeList = {\n    font: ['Kumbh Sans', \"Roboto Slab\", \"Space Mono\"],\n    primaryColor: [\"#F87070\", \"#70F3F8\", \"#D881F8\"],\n}\n\nexport default themes;","import { useEffect, useMemo, useState } from 'react';\n\nimport { StorageService } from '../services';\n\nimport themes from '../../app/themes';\nimport { theme, themeProps } from 'themes';\n\nconst useThemes = () => {\n    const themeStorage = useMemo(() => new StorageService('default-theme'), []);\n\n    const initialTheme: theme = {\n        font: themes.font[0],\n        primaryColor: themes.primaryColor[0],\n    };\n\n    const [theme, setTheme] = useState<theme>(initialTheme);\n\n    const switchThemeValue = (propName: themeProps, newPropNumber: number): void => {\n        setTheme(prevTheme => {\n            return {\n                ...prevTheme,\n                [propName]: themes[propName][newPropNumber]\n            };\n        });\n    };\n\n    useEffect(() => {\n        const localTheme = themeStorage.getData();\n\n        if (localTheme) {\n            setTheme(JSON.parse(localTheme));\n        }\n    }, [themeStorage]);\n\n    useEffect(() => {\n        themeStorage.setData(JSON.stringify(theme));\n    }, [theme, themeStorage]);\n\n    return { theme, switchThemeValue };\n};\n\nexport default useThemes;","import { useState, useEffect, useMemo } from 'react';\nimport { timerConfig } from 'timer';\nimport { StorageService } from '../services';\n\nconst useTimerConfig = () => {\n    const timerStorage = useMemo(() => new StorageService('timer-config'), []);\n\n    const initConfig: timerConfig = {\n        'pomodoro': 25 * 60,\n        'short break': 5 * 60,\n        'long break': 15 * 60,\n    };\n\n    const [timerConfig, setTimerConfig] = useState<timerConfig>(initConfig);\n\n    const changeTimerConfig = (newConfig: timerConfig): void => {\n        setTimerConfig(newConfig);\n    };\n\n    useEffect(() => {\n        const localConfig = timerStorage.getData();\n\n        if (localConfig) {\n            setTimerConfig(JSON.parse(localConfig));\n        }\n    }, [timerStorage]);\n\n    useEffect(() => {\n        timerStorage.setData(JSON.stringify(timerConfig));\n    }, [timerConfig, timerStorage]);\n\n    return { timerConfig, changeTimerConfig };\n};\n\nexport default useTimerConfig;","import { createGlobalStyle } from 'styled-components';\nimport { fontSize, FontSizeProps } from 'styled-system';\n\ninterface CommonStylesProps extends FontSizeProps {\n    'font': string,\n}\n\nconst CommonStyles = createGlobalStyle<CommonStylesProps>`\n  * {\n    box-sizing: border-box;\n    font-family: ${props => props.font};\n  }\n\n  body {\n    background-color: #1e213f;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin: 0;\n    line-height: 1;\n  }\n\n  .focus {\n    outline: none;\n\n    &:focus-visible {\n      outline: #888 2px solid;\n    }\n  }\n\n  &:root {\n    ${fontSize}\n  }\n`;\n\nexport default CommonStyles;","import App from './App';\n\nexport default App;","import React, { useState } from 'react';\n\nimport Timer from '../components/Timer';\nimport { Portal } from '../common/containers';\nimport ModalWindow from '../components/ModalWindow';\nimport { useThemes, useTimerConfig } from '../common/hooks';\nimport { ThemeProvider } from 'styled-components';\nimport CommonStyles from '../index.styled';\n\nimport themes from './themes';\n\nconst App: React.FC = () => {\n    const { theme, switchThemeValue } = useThemes();\n    const { timerConfig, changeTimerConfig } = useTimerConfig();\n\n    const [isModalActive, toggleModal] = useState<boolean>(false);\n\n    const Modal = isModalActive\n        ?\n        <Portal id='modal-root'>\n            <ModalWindow changeTimerConfig={changeTimerConfig}\n                         switchThemeValue={switchThemeValue}\n                         themeList={themes}\n                         closeModal={() => toggleModal(false)}\n                         timerConfig={timerConfig}\n            />\n        </Portal>\n        : null;\n\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CommonStyles fontSize={[9, 11, 13, 15, 16]} font={theme.font}/>\n            <Timer config={timerConfig} openModal={() => toggleModal(true)}/>\n            {Modal}\n        </ThemeProvider>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nimport 'normalize.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}